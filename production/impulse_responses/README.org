* Binaural Room Impulse Response measurements Sonic Epistemologies

/2016-01-10/11 hek basel, 2016-01-2x postpro rumori, 2016-01-31 readme, 2018-07 revised/

** Measurement layout

#+BEGIN_EXAMPLE
5 mic positions (a–e)
14 loudspeakers/positions (1–14, 12 reused)
3 microphone pairs (kk, dpa, ortf)
#+END_EXAMPLE

[[ise_floor_plan.svg][Floor plan]]

Find detailed information below under [[#measurement_procedure]].

** Jconvolver usage

Jconvolver is a high performance convolution engine by Fons Adriaensen.  It is especially suited for larger convolution matrices of long impulse responses (e.g., room impulse responses).  Jconvolver can be found at [[http://kokkinizita.linuxaudio.org/linuxaudio/index.html]].

#+BEGIN_EXAMPLE
$ cd .../impulse_responses
$ jconvolver -M -V -N <name> jconvolver/<config-file>
#+END_EXAMPLE

- -M -V : optimisation flags
- -N <name> can be used to assign jack name (useful if multiple convolvers used)

** Jconvolver configuration files

A collection of configuration files for Jconvolver is provided in the ~jconvolver~ subdirectory using different combinations of the measured impulse responses.

- naming scheme follows the measurement nomenclature described under [[#measurement_procedure]]
- configurations are related to irdb_44 subdirectory
- if jconvolver is called from a different path or 48k is to be used, the ~/cd ./irdb_44~ directive in the files should be adjusted

*** All speaker positions, all listening positions, dummy head mic

*14x10 matrix*, outputs are listening positions a–e in pairs*

- se_kk_x_000_t1.conf :: door to staircase open (for position a only)
- se_kk_x_000_t2.conf :: door to staircase closed (for position a only)
- se_kk_x_000_t5.conf :: door to staircase (for position a only), speakers 13 and 14 play with subwoofers added

*** All speaker positions for a single listening position, dummy head mic

*14x2 matrix*, output is the respective listening position

- e.g. se_kk_a_000_t1.conf

*** For listening position d only: all speaker positions, all 4 listening angles, dummy head

- e.g. se_kk_d_xxx_t1.conf

*** All configurations are also available for dpa mic (_dpa_) and ortf mics (_ortf_)

** Measurement procedure
   :PROPERTIES:
   :CUSTOM_ID: measurement_procedure
   :END:

/measurements: 2016-01-10/11 hek basel, postpro: 2016-01-2x rumori/

*** Measurement basics

- 5 microphone/listening positions
- 14 loudspeaker/source positions
- 4 measurement directions (microphone angles, *position d only*)
- 3 microphone types/configurations

*** IR nomenclature

Example filename: ~se_kk_b_000_t1_001.wav~

- se_ :: global prefix ("sonic epistemologies")
- kk_ :: microphone identifier [ kk | dpa | ortf ]
- a_ :: measurement/microphone position (a..e)
- 000_ :: microphone orientation (angle) [ 000 | 090 | 180 | 270 ]
- t1_ :: measurement take
- 001 :: source position / speaker number (001..014)

*** IR properties

- wav, 2-ch stereo, 24 bit signed, 48k (measurement sr), 44k (resampled)
- direct signal portion and pre-delay (time of flight in air) conserved
- measurement system latency compensated
- duration:
  + se_*_a_* :: 2.972s (44k: 131072 samples, 48k: 142663 samples)
  + others :: 1.486s (44k: 65536 samples, 48k: 71332 samples)
- fades :: raised half cosine window for fade-in and fade-out
  + fade-in :: 0.0004s (44k: 16 samples, 48k: 17 samples)
  + fade-out :: 0.023s (44k: 1024 samples, 48k: 1115 samples)

*** Microphones

- kk :: Soundman dummy head w/ DPA 4060 at ear canal, no caps (flat mic response)
- dpa :: DPA 4060 on temples of Soundman dummy head, no caps (flat mic response)
- ortf :: 2* Suter C-3 (from hek) in quasi-ORTF configuration

*** Loudspeakers

- 1–6 :: Yamaha MSP-5 (from hek)
- 7–8 :: Yamaha MSP-7 (from hek)
- 9–10 :: Neumann KH 120
- 11–12 :: Eve SC 205
- 13–14 :: Kling+Freitag PA hek (+ K&F subs for some takes)

*** Measurement setup

- Midas M-32 used as a usb audio interface
- Mic gain settings on M-32: all +32.0 dB
- sample rate: 48000
- block size: 512 samples * 3 periods
- measured roundtrip delay incl. converters: 2583.310 frames (0.053819 sec)
  (measured using jack_delay, system delay corrected in post-processed ir)
- measurements done using custom version of ALIKI (http://kokkinizita.linuxaudio.org/linuxaudio/index.html)

**** ALIKI measurement sweep parameters

- fade in :: 1
- start freq :: 20
- sweep time :: 20
- end freq :: 20480
- fade out :: 0.03
- type :: log

**** ALIKI settings

- capture time :: 25.0
- sweep output level :: -28 dB

*** Remarks: positions and takes

- se_*_a :: ls 12 level reduced by 10 dB (due to close speaker)
  (NOT corrected in post-processed ir due to overall dynamic range)

- se_*_a_*_t1 :: door to staircase open
- se_*_a_*_t2 :: door to staircase closed
- se_*_a_*_t3 :: ls 12–14 only, door open, 13–14 subwoofers added (norm level)
- se_*_a_*_t4 :: ls 12–14 only, door closed, 13–14 subwoofers added (raised level)
- se_*_a_*_t5 :: door open, 13–14 subwoofers added (raised level)

- se_*_b :: ls12 level reduced by 10 dB (due to close speaker)
  (NOT corrected in post-processed ir due to overall dynamic range)

- se_*_c_*_t1 :: ls 1–12 (split measurement)
- se_*_c_*_t2 :: ls 13–14  (split measurement)
  (merged to _t1 in raw stage, after export)

*** Post-production

- deconvolution of measurements using ~aliki-convol~
  + se_*_a_* * :: 4 seconds duration (longer reverb tail)
  + others :: 2 seconds duration
- export impulse responses using ~aliki-export~ (raw stage)
- merge se_*_c_*_t1 (1–12) and _t2 (13–14) to _t1 (1–14)

- cut system delay and apply gain factor 8.0 (+18dB) using scaleSoundFile.scd
- now at stage ~base_48~

**** Generate ~irdb_48~ using ~sox~

convert to 24bit, apply fade-in/out, trim to final length

- for se_*_a_* (longer reverb tail) ::
#+BEGIN_EXAMPLE
$ for file in `ls se_*_a_*.wav`; do echo $file; sox $file -b 24 ../irdb_48/$file fade h 17s fade h 0 142663s 1115s; done
#+END_EXAMPLE
- for others (shorter reverb tail) ::
#+BEGIN_EXAMPLE
$ for file in `ls se_*.wav`; do echo $file; sox $file -b 24 ../irdb_48/$file fade h 17s fade h 0 71332s 1115s; done
#END_EXAMPLE

**** Generate ~base_44~ from ~base_48~ by resampling using sndfile-resample

#+BEGIN_EXAMPLE
$ for file in `ls *.wav`; do echo $file; sndfile-resample -to 44100 -c 0 $file ../base_44/$file; done
#+END_EXAMPLE

**** Generate ~irdb_44~ using ~sox~

convert to 24bit, apply fade-in/out, trim to final length

- for se_*_a_* (longer reverb tail) ::
#+BEGIN_EXAMPLE
$ for file in `ls se_*_a_*.wav`; do echo $file; sox $file -b 24 ../irdb_44/$file fade h 16s fade h 0 131072s 1024s; done
#+END_EXAMPLE
- for others (shorter reverb tail) ::
#+BEGIN_EXAMPLE
$ for file in `ls se_*.wav`; do echo $file; sox $file -b 24 ../irdb_44/$file fade h 16s fade h 0 65536s 1024s; done
#+END_EXAMPLE

**** Generate jconvolver configurations

- generate confs for single mic types/single mic pos, t1
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; do for pos in a b c d e; \
  do ls se_${mic}_${pos}_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_${pos}_000_t1 -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_${pos}_000_t1.conf; \
  done; done
#+END_EXAMPLE

- generate confs for single mic types, mic pos a, t2 and t5
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; do for take in t2 t5; \
  do ls se_${mic}_a_000_${take}_*.wav | \
  genjconv.sh -n se_${mic}_a_000_${take} -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_a_000_${take}.conf; \
  done; done
#+END_EXAMPLE

- generate conf for single mic types, mic pos d, t1, all 4 angles
  + manually edit files: extend to 8 output channels, remove superfluous # EOFs (proper automatic generation not possible with current genjconv.sh)
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; \
  do ls se_${mic}_d_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_d_xxx_t1 -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_d_xxx_t1.conf; \
  done
$ for mic in kk dpa ortf; do cnt=2; for angle in 090 180 270; do \
  ls se_${mic}_d_${angle}_t1_*.wav | \
  genjconv.sh -n se_${mic}_d_xxx_t1 -p ./irdb_44 -s 64 -t 142663 -y 1,${cnt} -z\
  >> ../se_${mic}_d_xxx_t1.conf; cnt=$((cnt+2)); \
  done; done
#+END_EXAMPLE

- generate conf for single mic types, all mic pos, t1
  + manually edit files: extend to 10 output channels, remove superfluous # EOFs (proper automatic generation not possible with current genjconv.sh)
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; \
  do ls se_${mic}_a_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t1 -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_x_000_t1.conf; \
  done
$ for mic in kk dpa ortf; do cnt=2; for pos in b c d e; do \
  ls se_${mic}_${pos}_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t1 -p ./irdb_44 -s 64 -t 142663 -y 1,${cnt} -z\
  >> ../se_${mic}_x_000_t1.conf; cnt=$((cnt+2)); \
  done; done
#+END_EXAMPLE

- same (single mic types, all mic pos) with t2 at pos a (t1 for other pos)
  + manually edit files: extend to 10 output channels, remove superfluous # EOFs (proper automatic generation not possible with current genjconv.sh)
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; \
  do ls se_${mic}_a_000_t2_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t2 -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_x_000_t2.conf; \
  done
$ for mic in kk dpa ortf; do cnt=2; for pos in b c d e; do \
  ls se_${mic}_${pos}_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t1 -p ./irdb_44 -s 64 -t 142663 -y 1,${cnt} -z\
  >> ../se_${mic}_x_000_t2.conf; cnt=$((cnt+2)); \
  done; done
#+END_EXAMPLE

- same (single mic types, all mic pos) with t5 at pos a (t1 for other pos)
  + manually edit files: extend to 10 output channels, remove superfluous # EOFs (proper automatic generation not possible with current genjconv.sh)
#+BEGIN_EXAMPLE
$ for mic in kk dpa ortf; \
  do ls se_${mic}_a_000_t5_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t5 -p ./irdb_44 -s 64 -t 142663 > \
  ../se_${mic}_x_000_t5.conf; \
  done
$ for mic in kk dpa ortf; do cnt=2; for pos in b c d e; do \
  ls se_${mic}_${pos}_000_t1_*.wav | \
  genjconv.sh -n se_${mic}_x_000_t1 -p ./irdb_44 -s 64 -t 142663 -y 1,${cnt} -z\
  >> ../se_${mic}_x_000_t5.conf; cnt=$((cnt+2)); \
  done; done
#+END_EXAMPLE
